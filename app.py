# app.py
import streamlit as st
from openai import OpenAI
import os
import logging
import re
from datetime import datetime

# ---------- SETUP ----------
def setup_logger():
    os.makedirs("logs", exist_ok=True)
    logger = logging.getLogger("LLMLogger")
    logger.setLevel(logging.INFO)

    if not logger.handlers:
        fh = logging.FileHandler("logs/llm_app.log")
        ch = logging.StreamHandler()
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        fh.setFormatter(formatter)
        ch.setFormatter(formatter)
        logger.addHandler(fh)
        logger.addHandler(ch)

    return logger

logger = setup_logger()

# ---------- HELPERS ----------
def extract_code_blocks(response):
    python_match = re.search(r"```python(.*?)```", response, re.DOTALL)
    yaml_match = re.search(r"```yaml(.*?)```", response, re.DOTALL)

    py_code = python_match.group(1).strip() if python_match else ""
    yaml_code = yaml_match.group(1).strip() if yaml_match else ""
    return py_code, yaml_code

def save_output_files(py_code: str, yaml_code: str):
    os.makedirs("output", exist_ok=True)
    with open("output/modified_script.py", "w") as f:
        f.write(py_code)
    with open("output/config.yaml", "w") as f:
        f.write(yaml_code)

# ---------- STREAMLIT UI ----------
st.set_page_config(page_title="LLM Script Parameterizer", layout="wide")
st.title("üîß LLM-Based Python Script Parameterizer")

# API Key Input
openai_api_key = st.text_input("üîë Enter your OpenAI API Key", type="password")
model_choice = st.selectbox("üß† Choose OpenAI Model", ["gpt-3.5-turbo", "gpt-4"])

# Sample code checkbox
use_sample = st.checkbox("üß™ Use Sample Python Script Instead of Upload")

original_code = ""
uploaded_file = st.file_uploader("üìÇ Upload your Python Script", type=["py"])

if use_sample:
    original_code = '''
def connect_and_download(url, timeout=10):
    import requests
    response = requests.get(url, timeout=timeout)
    return response.json()

data = connect_and_download("https://api.example.com/data")
print(data)
'''
    st.code(original_code, language="python")
elif uploaded_file:
    #no display of uploaded code
    original_code = uploaded_file.read().decode("utf-8")
    # st.code(original_code, language="python")

instruction = st.text_area("‚úçÔ∏è Instruction", "Make the script parameterized using YAML. include error handling, logging, and retries.")

# ---------- PROCESS ----------
if st.button("üöÄ Run LLM") and original_code and instruction and openai_api_key:
    try:
        client = OpenAI(api_key=openai_api_key)
        today = datetime.now().strftime("%Y-%m-%d")

        prompt = f"""
                You are an expert Python developer.

                Given the following Python script, your task is to:
                1. Modify the script to be parameterized using a YAML config.
                2. Add a header at the top of the script with:
                - Author: autogenerated
                - Created on: {today}
                - Last updated: {today}
                - Description: Parameterized using OpenAI LLM
                3. Output:
                - The modified Python script in a ```python block
                - The YAML configuration in a ```yaml block

                Python script:
                ```python
                {original_code}
                Instruction: {instruction}
                """

        logger.info("Sending request to OpenAI API")
        with st.spinner(f"ü§ñ Generating with {model_choice}..."):
            response = client.chat.completions.create(model=model_choice,
            temperature=0.2,
            messages=[
                {"role": "system", "content": "You're an expert Python developer."},
                {"role": "user", "content": prompt}
            ])

        result = response.choices[0].message.content
        logger.info("LLM response received")

        py_code, yaml_code = extract_code_blocks(result)

        if not py_code:
            st.error("‚ö†Ô∏è Could not parse Python code block from response.")
            logger.error("Failed to extract Python code block.")
        else:
            save_output_files(py_code, yaml_code)

            st.subheader("üìú Modified Python Script")
            st.code(py_code, language="python")
            st.download_button("üíæ Download Python Script", py_code, file_name="modified_script.py")

            if yaml_code:
                st.subheader("üßæ YAML Configuration")
                st.code(yaml_code, language="yaml")
                st.download_button("üíæ Download YAML Config", yaml_code, file_name="config.yaml")
            else:
                st.warning("‚ö†Ô∏è No YAML configuration returned.")
    except Exception as e:
        st.error(f"‚ùå Error: {str(e)}")
        logger.exception("Processing failed.")
